#ifndef _CWC_INPUT_KEYBOARD_H
#define _CWC_INPUT_KEYBOARD_H

#include <wayland-util.h>
#include <wlr/types/wlr_input_device.h>
#include <xkbcommon/xkbcommon.h>

#include "cwc/util.h"

struct cwc_server;

struct cwc_keyboard_group {
    struct cwc_seat *seat;
    struct wlr_keyboard_group *wlr_kbd_group;

    struct wl_listener modifiers_l;
    struct wl_listener key_l;

    struct wl_listener config_commit_l; // for native
};

struct cwc_keyboard {
    struct cwc_seat *seat;
    struct wlr_keyboard *wlr;

    struct wl_listener modifiers_l;
    struct wl_listener key_l;
};

struct cwc_virtual_keyboard {
    struct cwc_keyboard *base;

    struct wl_listener destroy_l;
};

struct cwc_keyboard_group *cwc_keyboard_group_create(struct cwc_seat *seat,
                                                     bool virtual);

void cwc_keyboard_group_destroy(struct cwc_keyboard_group *kbd_group);

void cwc_keyboard_group_add_device(struct cwc_keyboard_group *kbd_group,
                                   struct wlr_input_device *device);

void cwc_keyboard_update_keymap(struct wlr_keyboard *wlr_kbd);

struct wlr_surface;
void keyboard_focus_surface(struct cwc_seat *seat, struct wlr_surface *surface);

//================== KEYBINDING ====================
enum cwc_keybind_type {
    CWC_KEYBIND_TYPE_LUA,
    CWC_KEYBIND_TYPE_C,
};

struct cwc_keybind_info {
    enum cwc_keybind_type type;
    uint64_t key; // upper 32 bit is modifier and lower is the xkb_keysym_t
    char *description;
    char *group;
    union {
        void (*on_press)(void *args);
        int luaref_press;
    };
    union {
        void (*on_release)(void *args);
        int luaref_release;
    };
    void *args;
    bool exclusive; // execute keybind even when locked or inhibited
    bool repeat;
};

struct cwc_keybind_map {
    struct wl_list link;
    struct cwc_hhmap *map; // struct cwc_keybind_info
    bool active;
    struct wl_event_source *repeat_timer;
    struct cwc_keybind_info *repeated_bind;
};

static inline uint32_t kbindinfo_key_get_modifier(uint64_t genkey)
{
    return genkey >> 32;
}

static inline uint32_t kbindinfo_key_get_keysym(uint64_t genkey)
{
    return genkey & 0xffffffff;
}

/* factory */
struct cwc_keybind_map *cwc_keybind_map_create(struct wl_list *list);
void cwc_keybind_map_destroy(struct cwc_keybind_map *kmap);
void cwc_keybind_map_clear(struct cwc_keybind_map *kmap);

struct lua_State;
int cwc_keybind_map_register_bind_from_lua(struct lua_State *L,
                                           struct cwc_keybind_map *kmap);

/* function which start with double underscore is the low level function.
 * the function without underscore prefix is just a wrapper around the
 * low level function that point to the default map on the global server struct.
 */

/* the key is 8 bytes length generated by combining the 4 bytes of modifiers and
 * 4 bytes of the keysym */
uint64_t keybind_generate_key(uint32_t modifiers, uint32_t key);

/* register a keybind to the map */
void keybind_kbd_register(struct cwc_keybind_map *kmap,
                          uint32_t modifiers,
                          xkb_keysym_t key,
                          struct cwc_keybind_info info);
void keybind_mouse_register(struct cwc_keybind_map *kmap,
                            uint32_t modifiers,
                            uint32_t button,
                            struct cwc_keybind_info info);

/* remove a keybind from a map */
void keybind_kbd_remove(struct cwc_keybind_map *kmap,
                        uint32_t modifiers,
                        xkb_keysym_t key);
void keybind_mouse_remove(struct cwc_keybind_map *kmap,
                          uint32_t modifiers,
                          uint32_t button);

/* true if a keybind entry found/processed */
bool keybind_kbd_execute(struct cwc_keybind_map *kmap,
                         struct cwc_seat *seat,
                         uint32_t modifiers,
                         xkb_keysym_t key,
                         bool press);
bool keybind_mouse_execute(struct cwc_keybind_map *kmap,
                           uint32_t modifiers,
                           uint32_t button,
                           bool press);

void keybind_register_common_key();

#endif // !_CWC_INPUT_KEYBOARD_H
